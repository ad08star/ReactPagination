{"version":3,"sources":["components/Pagination.js","components/Users.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["LEFT_PAGE","RIGHT_PAGE","range","from","to","step","arguments","length","undefined","i","push","Pagination","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","gotoPage","page","_this$props$onPageCha","onPageChanged","f","currentPage","Math","max","min","totalPages","paginationData","pageLimit","totalRecords","setState","handleClick","evt","preventDefault","handleMoveLeft","state","pageNeighbours","handleMoveRight","fetchPageNumbers","totalNumbers","pages","leftBound","rightBound","beforeLastPage","startPage","endPage","singleSpillOffset","leftSpill","rightSpill","leftSpillPage","rightSpillPage","extraPages","concat","toConsumableArray","_props$totalRecords","_props$pageLimit","_props$pageNeighbours","ceil","_this2","react_default","a","createElement","react","aria-label","className","map","index","key","href","onClick","aria-hidden","e","Component","Users","console","log","handleShow","users","style","cursor","first_name","last_name","company_name","city","zip","email","web","age","NavHeader","Navbar","bg","variant","Brand","Toggle","aria-controls","Collapse","id","Nav","color","App","allusers","currentUsers","show","isOldestFirst","toggleSort","str","changePointer","sortByParam","refs","pagination","pointerFirstName","pointerLastName","pointerCompanyName","pointerCity","pointerState","pointerZip","pointerWeb","pointerEmail","pointerAge","handleClose","user","userFirstName","userLastName","userCompanyName","userCity","userState","userZip","userEmail","userWeb","userAge","data","offset","slice","axios","get","then","response","catch","error","sort","b","_this3","_this$state","totalUsers","Navbar_NavHeader","paddingTop","Table","striped","bordered","hover","responsive","Users_Users","display","justifyContent","components_Pagination","ref","Modal","onHide","backgroundColor","Header","closeButton","Title","Body","textAlign","fontWeight","Footer","padding","type","border","borderRadius","outline","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9796786a.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst LEFT_PAGE = \"LEFT\";\r\nconst RIGHT_PAGE = \"RIGHT\";\r\n\r\nconst range = (from, to, step = 1) => {\r\n  let i = from;\r\n  const range = [];\r\n\r\n  while (i <= to) {\r\n    range.push(i);\r\n    i += step;\r\n  }\r\n\r\n  return range;\r\n};\r\n\r\nclass Pagination extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { totalRecords = null, pageLimit = 30, pageNeighbours = 0 } = props;\r\n\r\n    this.pageLimit = typeof pageLimit === \"number\" ? pageLimit : 30;\r\n    this.totalRecords = typeof totalRecords === \"number\" ? totalRecords : 0;\r\n\r\n    this.pageNeighbours =\r\n      typeof pageNeighbours === \"number\"\r\n        ? Math.max(0, Math.min(pageNeighbours, 2))\r\n        : 0;\r\n\r\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\r\n\r\n    this.state = { currentPage: 1 };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.gotoPage(1);\r\n  }\r\n\r\n  gotoPage = page => {\r\n    const { onPageChanged = f => f } = this.props;\r\n\r\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\r\n\r\n    const paginationData = {\r\n      currentPage,\r\n      totalPages: this.totalPages,\r\n      pageLimit: this.pageLimit,\r\n      totalRecords: this.totalRecords\r\n    };\r\n\r\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\r\n  };\r\n\r\n  handleClick = (page, evt) => {\r\n    evt.preventDefault();\r\n    this.gotoPage(page);\r\n  };\r\n\r\n  handleMoveLeft = evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\r\n  };\r\n\r\n  handleMoveRight = evt => {\r\n    evt.preventDefault();\r\n    this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\r\n  };\r\n\r\n  fetchPageNumbers = () => {\r\n    const totalPages = this.totalPages;\r\n    const currentPage = this.state.currentPage;\r\n    const pageNeighbours = this.pageNeighbours;\r\n\r\n    const totalNumbers = this.pageNeighbours * 2 + 3;\r\n    const totalBlocks = totalNumbers + 2;\r\n\r\n    if (totalPages > totalBlocks) {\r\n      let pages = [];\r\n\r\n      const leftBound = currentPage - pageNeighbours;\r\n      const rightBound = currentPage + pageNeighbours;\r\n      const beforeLastPage = totalPages - 1;\r\n\r\n      const startPage = leftBound > 2 ? leftBound : 2;\r\n      const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\r\n\r\n      pages = range(startPage, endPage);\r\n\r\n      const pagesCount = pages.length;\r\n      const singleSpillOffset = totalNumbers - pagesCount - 1;\r\n\r\n      const leftSpill = startPage > 2;\r\n      const rightSpill = endPage < beforeLastPage;\r\n\r\n      const leftSpillPage = LEFT_PAGE;\r\n      const rightSpillPage = RIGHT_PAGE;\r\n\r\n      if (leftSpill && !rightSpill) {\r\n        const extraPages = range(startPage - singleSpillOffset, startPage - 1);\r\n        pages = [leftSpillPage, ...extraPages, ...pages];\r\n      } else if (!leftSpill && rightSpill) {\r\n        const extraPages = range(endPage + 1, endPage + singleSpillOffset);\r\n        pages = [...pages, ...extraPages, rightSpillPage];\r\n      } else if (leftSpill && rightSpill) {\r\n        pages = [leftSpillPage, ...pages, rightSpillPage];\r\n      }\r\n\r\n      return [1, ...pages, totalPages];\r\n    }\r\n\r\n    return range(1, totalPages);\r\n  };\r\n\r\n  render() {\r\n    if (!this.totalRecords) return null;\r\n\r\n    if (this.totalPages === 1) return null;\r\n\r\n    const { currentPage } = this.state;\r\n    const pages = this.fetchPageNumbers();\r\n    //console.log(\"Inside pagination\", this.state);\r\n    return (\r\n      <Fragment>\r\n        <nav aria-label=\"Pagination\">\r\n          <ul className=\"pagination\">\r\n            {pages.map((page, index) => {\r\n              if (page === LEFT_PAGE)\r\n                return (\r\n                  <li key={index} className=\"page-item\">\r\n                    <a\r\n                      className=\"page-link\"\r\n                      href=\"#\"\r\n                      aria-label=\"Previous\"\r\n                      onClick={this.handleMoveLeft}\r\n                    >\r\n                      <span aria-hidden=\"true\">&laquo;</span>\r\n                      <span className=\"sr-only\">Previous</span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n\r\n              if (page === RIGHT_PAGE)\r\n                return (\r\n                  <li key={index} className=\"page-item\">\r\n                    <a\r\n                      className=\"page-link\"\r\n                      href=\"#\"\r\n                      aria-label=\"Next\"\r\n                      onClick={this.handleMoveRight}\r\n                    >\r\n                      <span aria-hidden=\"true\">&raquo;</span>\r\n                      <span className=\"sr-only\">Next</span>\r\n                    </a>\r\n                  </li>\r\n                );\r\n\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className={`page-item${\r\n                    currentPage === page ? \" active\" : \"\"\r\n                  }`}\r\n                >\r\n                  <a\r\n                    className=\"page-link\"\r\n                    href=\"#\"\r\n                    onClick={e => this.handleClick(page, e)}\r\n                  >\r\n                    {page}\r\n                  </a>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        </nav>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nPagination.propTypes = {\r\n  totalRecords: PropTypes.number.isRequired,\r\n  pageLimit: PropTypes.number,\r\n  pageNeighbours: PropTypes.number,\r\n  onPageChanged: PropTypes.func\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nexport default class Users extends Component {\r\n  render() {\r\n    console.log(\"inside user\");\r\n    return (\r\n      <Fragment>\r\n        <tr>\r\n          <td\r\n            onClick={() => this.props.handleShow(this.props.users)}\r\n            style={{ cursor: \"pointer\" }}\r\n          >\r\n            {this.props.users.first_name}\r\n          </td>\r\n          <td>{this.props.users.last_name}</td>\r\n          <td>{this.props.users.company_name}</td>\r\n          <td>{this.props.users.city}</td>\r\n          <td>{this.props.users.state}</td>\r\n          <td>{this.props.users.zip}</td>\r\n          <td>{this.props.users.email}</td>\r\n          <td>{this.props.users.web}</td>\r\n          <td>{this.props.users.age}</td>\r\n        </tr>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nexport default class NavHeader extends Component {\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"primary\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#home\">React-Pagination</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n          <Nav className=\"mr-auto\" style={{ color: \"white\" }}>\r\n            Page: {this.props.totalPages}/{this.props.currentPage}\r\n          </Nav>\r\n        </Navbar.Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport Pagination from \"./components/Pagination\";\nimport Users from \"./components/Users\";\nimport NavHeader from \"./components/Navbar\";\nimport { Table, Modal } from \"react-bootstrap\";\n\nclass App extends Component {\n  state = {\n    allusers: [],\n    currentUsers: [],\n    currentPage: null,\n    totalPages: null,\n    show: false,\n    isOldestFirst: true\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://demo0734009.mockable.io/users\")\n      .then(response => {\n        this.setState({\n          allusers: response.data\n        });\n      })\n      .catch(error => console.log(error.response));\n\n    this.pointerFirstName = true;\n    this.pointerLastName = true;\n    this.pointerCompanyName = true;\n    this.pointerCity = true;\n    this.pointerState = true;\n    this.pointerZip = true;\n    this.pointerEmail = true;\n    this.pointerWeb = true;\n    this.pointerAge = true;\n  }\n\n  sortByParam(str) {\n    let { allusers } = this.state;\n    let newAllusers;\n    //console.log(\"newAllusers 1: \", newAllusers);\n    if (this.state.isOldestFirst) {\n      newAllusers = allusers.sort((a, b) => {\n        if (a[str] > b[str]) return 1;\n        else return -1;\n      });\n    } else {\n      newAllusers = allusers.sort((a, b) => {\n        if (a[str] < b[str]) return 1;\n        else return -1;\n      });\n    }\n    //console.log(\"Sorted array:\", newAllusers);\n    return newAllusers;\n  }\n\n  toggleSort = str => {\n    this.changePointer(str);\n    this.setState({\n      isOldestFirst: !this.state.isOldestFirst,\n      allusers: this.sortByParam(str)\n    });\n\n    this.refs.pagination.gotoPage(1);\n  };\n\n  changePointer = str => {\n    if (str === \"first_name\") {\n      this.pointerFirstName = !this.pointerFirstName;\n    } else if (str === \"last_name\") {\n      this.pointerLastName = !this.pointerLastName;\n    } else if (str === \"company_name\") {\n      this.pointerCompanyName = !this.pointerCompanyName;\n    } else if (str === \"city\") {\n      this.pointerCity = !this.pointerCity;\n    } else if (str === \"state\") {\n      this.pointerState = !this.pointerState;\n    } else if (str === \"zip\") {\n      this.pointerZip = !this.pointerZip;\n    } else if (str === \"web\") {\n      this.pointerWeb = !this.pointerWeb;\n    } else if (str === \"email\") {\n      this.pointerEmail = !this.pointerEmail;\n    } else if (str === \"age\") {\n      this.pointerAge = !this.pointerAge;\n    }\n  };\n\n  handleClose = () => {\n    this.setState({ show: false });\n  };\n\n  handleShow = user => {\n    this.setState({ show: true });\n    this.userFirstName = user.first_name;\n    this.userLastName = user.last_name;\n    this.userCompanyName = user.company_name;\n    this.userCity = user.city;\n    this.userState = user.state;\n    this.userZip = user.zip;\n    this.userEmail = user.email;\n    this.userWeb = user.web;\n    this.userAge = user.age;\n  };\n\n  onPageChanged = data => {\n    const { allusers } = this.state;\n    const { currentPage, totalPages, pageLimit } = data;\n\n    const offset = (currentPage - 1) * pageLimit;\n    const currentUsers = allusers.slice(offset, offset + pageLimit);\n\n    this.setState({ currentPage, currentUsers, totalPages });\n  };\n\n  render() {\n    const { allusers, currentUsers, currentPage, totalPages } = this.state;\n    const totalUsers = allusers.length;\n\n    if (totalUsers === 0) return null;\n\n    return (\n      <div className=\"App\">\n        <NavHeader totalPages={totalPages} currentPage={currentPage} />\n        <div style={{ paddingTop: \"3vw\" }}>\n          <Table striped bordered hover responsive=\"sm\">\n            <thead>\n              <tr>\n                <th onClick={e => this.toggleSort(\"first_name\")}>\n                  First Name{\" \"}\n                  <i\n                    className={\n                      this.pointerFirstName\n                        ? \"fas fa-angle-double-down\"\n                        : \"fas fa-angle-double-up\"\n                    }\n                  />\n                </th>\n                <th onClick={e => this.toggleSort(\"last_name\")}>\n                  Last Name{\" \"}\n                  <i\n                    className={\n                      this.pointerLastName\n                        ? \"fas fa-angle-double-down\"\n                        : \"fas fa-angle-double-up\"\n                    }\n                  />\n                </th>\n                <th onClick={e => this.toggleSort(\"company_name\")}>\n                  Company{\" \"}\n                  <i\n                    className={\n                      this.pointerCompanyName\n                        ? \"fas fa-angle-double-down\"\n                        : \"fas fa-angle-double-up\"\n                    }\n                  />\n                </th>\n                <th onClick={e => this.toggleSort(\"city\")}>\n                  City{\" \"}\n                  <i\n                    className={\n                      this.pointerCity\n                        ? \"fas fa-angle-double-down\"\n                        : \"fas fa-angle-double-up\"\n                    }\n                  />\n                </th>\n                <th onClick={e => this.toggleSort(\"state\")}>\n                  State{\" \"}\n                  <i\n                    className={\n                      this.pointerState\n                        ? \"fas fa-angle-double-down\"\n                        : \"fas fa-angle-double-up\"\n                    }\n                  />\n                </th>\n                <th onClick={e => this.toggleSort(\"zip\")}>\n                  Zip{\" \"}\n                  <i\n                    className={\n                      this.pointerZip\n                        ? \"fas fa-angle-double-down\"\n                        : \"fas fa-angle-double-up\"\n                    }\n                  />\n                </th>\n                <th onClick={e => this.toggleSort(\"email\")}>\n                  Email{\" \"}\n                  <i\n                    className={\n                      this.pointerEmail\n                        ? \"fas fa-angle-double-down\"\n                        : \"fas fa-angle-double-up\"\n                    }\n                  />\n                </th>\n                <th onClick={e => this.toggleSort(\"web\")}>\n                  Web{\" \"}\n                  <i\n                    className={\n                      this.pointerWeb\n                        ? \"fas fa-angle-double-down\"\n                        : \"fas fa-angle-double-up\"\n                    }\n                  />\n                </th>\n                <th onClick={e => this.toggleSort(\"age\")}>\n                  Age{\" \"}\n                  <i\n                    className={\n                      this.pointerAge\n                        ? \"fas fa-angle-double-down\"\n                        : \"fas fa-angle-double-up\"\n                    }\n                  />\n                </th>\n              </tr>\n            </thead>\n            <tbody>\n              {currentUsers.map(user => (\n                <Users\n                  key={user.id}\n                  users={user}\n                  handleShow={this.handleShow}\n                />\n              ))}\n            </tbody>\n          </Table>\n        </div>\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n          <Pagination\n            totalRecords={totalUsers}\n            pageLimit={5}\n            pageNeighbours={1}\n            onPageChanged={this.onPageChanged}\n            ref=\"pagination\"\n          />\n        </div>\n\n        <Modal\n          show={this.state.show}\n          onHide={this.handleClose}\n          style={{ backgroundColor: \"rgba(228, 223, 218, 0.6)\" }}\n        >\n          <Modal.Header\n            closeButton\n            style={{ backgroundColor: \"#007bff\", color: \"white\" }}\n          >\n            <Modal.Title>User Details</Modal.Title>\n          </Modal.Header>\n          <Modal.Body\n            style={{\n              backgroundColor: \"#e4dfda\",\n              textAlign: \"center\",\n              fontWeight: 700,\n              color: \"#4e4a4a\"\n            }}\n          >\n            <Table striped bordered hover responsive=\"sm\">\n              <tbody>\n                <tr>\n                  <td>First Name</td>\n                  <td>{this.userFirstName}</td>\n                </tr>\n                <tr>\n                  <td>Last Name</td>\n                  <td>{this.userLastName}</td>\n                </tr>\n                <tr>\n                  <td>Company</td>\n                  <td>{this.userCompanyName}</td>\n                </tr>\n                <tr>\n                  <td>City</td>\n                  <td>{this.userCity}</td>\n                </tr>\n                <tr>\n                  <td>State</td>\n                  <td>{this.userState}</td>\n                </tr>\n                <tr>\n                  <td>Zip</td>\n                  <td>{this.userZip}</td>\n                </tr>\n                <tr>\n                  <td>Email</td>\n                  <td>{this.userEmail}</td>\n                </tr>\n                <tr>\n                  <td>Web</td>\n                  <td>{this.userWeb}</td>\n                </tr>\n                <tr>\n                  <td>Age</td>\n                  <td>{this.userAge}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </Modal.Body>\n          <Modal.Footer\n            style={{ backgroundColor: \"#007bff\", padding: \"8px 15px\" }}\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-default\"\n              style={{\n                backgroundColor: \"#007bff\",\n                border: \"3px solid white\",\n                borderRadius: \"8px\",\n                color: \"white\",\n                fontWeight: \"500\",\n                outline: \"none\"\n              }}\n              onClick={this.handleClose}\n            >\n              Close\n            </button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}